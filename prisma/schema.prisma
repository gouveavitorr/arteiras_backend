// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  client   Client? @relation(fields: [clientId], references: [id])
  clientId String?
  admin    Admin   @relation(fields: [adminId], references: [id])
  adminId  String
}

model Product {
  id          String  @id @default(cuid())
  name        String
  price       Float
  description String
  images      Image[]
  store       Store   @relation(fields: [storeId], references: [id])
  storeId     String
  quantity    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?
}

model Category {
  id     String  @id @default(cuid())
  name   String
  stores Store[]
}

model Image {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  link      String
}

model Store {
  id          String     @id @default(cuid())
  name        String     @unique
  description String
  owner       String
  products    Product[]
  categories  Category[]

  phoneNumber String? @unique
  instagramId String? @unique
  facebookId  String? @unique
}

model Seller {
  id   String @id @default(cuid())
  name String @unique
  cpf  String @unique

  phoneNumber String @unique
}

model Client {
  id       String @id @default(cuid())
  name     String @unique
  email    String @unique
  cpf      String @unique
  password String

  phoneNumber String    @unique
  address     String
  orders      Order[]
  sessions    Session[]
}

model Admin {
  id       String    @id @default(cuid())
  name     String    @unique
  email    String    @unique
  password String
  sessions Session[]
}

enum orderStatus {
  PENDING_CART
  WAITING_PAYMENT
  CANCELLED
  READY_TO_SEND
  IN_TRANSPORT
  CONCLUDED
}

model Order {
  id               String  @id @default(cuid())
  address          String?
  totalAmount      Float
  deliveryExpenses Float

  products     Product[]
  orderStatus  orderStatus
  trackingCode String
  payment      Boolean

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  createdAt DateTime @default(now())
}
