generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(cuid())
  name     String
  email    String
  password String
  role     String
  Customer Customer?
}

model Customer {
  id             String          @id @default(cuid())
  cpf            String          @unique
  phoneNumber    String          @unique
  orders         Order[]
  address        Address[]
  paymentMethods PaymentMethod[]
  userId         String          @unique
  user           User            @relation(fields: [userId], references: [id])
}

model Product {
  id          String      @id @default(cuid())
  name        String
  price       Float
  description String
  images      Image[]
  weight      Float
  size        Float
  quantity    Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  storeId     String
  store       Store       @relation(fields: [storeId], references: [id])
  OrderItem   OrderItem[] //por que o orderItem t√° aqui?
  categories  Category[]
}

model Category {
  id       String    @id @default(cuid())
  name     String
  stores   Store[]
  products Product[]
}

model Image {
  id        String  @id @default(cuid())
  productId String
  link      String
  product   Product @relation(fields: [productId], references: [id])
}

model Store {
  id          String     @id @default(cuid())
  name        String     @unique
  description String
  image       String
  seller      Seller     @relation(fields: [sellerId], references: [id])
  sellerId    String     @unique
  phoneNumber String?    @unique
  instagramId String?    @unique
  facebookId  String?    @unique
  products    Product[]
  categories  Category[]
  orders      Order[]
}

model Seller {
  id          String  @id @default(cuid())
  name        String  @unique
  cpf         String  @unique
  phoneNumber String  @unique
  Store       Store?
}

model Address {
  id           String   @id @default(cuid())
  street       String
  number       String
  neighborhood String
  city         String
  state        String
  country      String
  postalCode   String
  recipient    String
  reference    String
  customer     Customer @relation(fields: [customerId], references: [id])
  customerId   String
  orders       Order[]
}

model PaymentMethod {
  id         String   @id @default(cuid())
  type       String
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  orders     Order[]
}

model Order {
  id               String         @id @default(cuid())
  orderItems       OrderItem[]
  totalAmount      Float
  deliveryExpenses Float
  orderStatus      orderStatus
  trackingCode     String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  customer         Customer       @relation(fields: [customerId], references: [id])
  customerId       String
  address          Address?       @relation(fields: [addressId], references: [id])
  addressId        String?
  paymentMethod    PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId  String?
  stores           Store[]
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  productId String
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

enum orderStatus {
  PENDING_CART
  WAITING_PAYMENT
  CANCELLED
  READY_TO_SEND
  IN_TRANSPORT
  CONCLUDED
}
