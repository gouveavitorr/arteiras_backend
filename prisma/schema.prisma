generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  clientId     String?
  adminId      String
  admin        Admin    @relation(fields: [adminId], references: [id])
  client       Client?  @relation(fields: [clientId], references: [id])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Float
  description String
  storeId     String
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderId     String?
  images      Image[]
  Order       Order?   @relation(fields: [orderId], references: [id])
  store       Store    @relation(fields: [storeId], references: [id])
}

model Category {
  id     String  @id @default(cuid())
  name   String
  stores Store[] @relation("CategoryToStore")
}

model Image {
  id        String  @id @default(cuid())
  productId String
  link      String
  product   Product @relation(fields: [productId], references: [id])
}

model Store {
  id          String     @id @default(cuid())
  name        String     @unique
  description String
  owner       String
  phoneNumber String?    @unique
  instagramId String?    @unique
  facebookId  String?    @unique
  products    Product[]
  categories  Category[] @relation("CategoryToStore")
}

model Seller {
  id          String @id @default(cuid())
  name        String @unique
  cpf         String @unique
  phoneNumber String @unique
}

model Client {
  id          String    @id @default(cuid())
  name        String    @unique
  email       String    @unique
  cpf         String    @unique
  password    String
  phoneNumber String    @unique
  address     String
  orders      Order[]
  sessions    Session[]
}

model Admin {
  id       String    @id @default(cuid())
  name     String    @unique
  email    String    @unique
  password String
  sessions Session[]
}

model Order {
  id               String      @id @default(cuid())
  address          String?
  totalAmount      Float
  deliveryExpenses Float
  orderStatus      orderStatus
  trackingCode     String
  payment          Boolean
  clientId         String
  createdAt        DateTime    @default(now())
  client           Client      @relation(fields: [clientId], references: [id])
  products         Product[]
}

enum orderStatus {
  PENDING_CART
  WAITING_PAYMENT
  CANCELLED
  READY_TO_SEND
  IN_TRANSPORT
  CONCLUDED
}
