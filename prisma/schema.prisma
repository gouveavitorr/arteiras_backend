generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  password       String
  role           Role            @default(CUSTOMER)
  cpf            String?         @unique
  phoneNumber    String?         @unique
  addresses      Address[]
  cartItems      CartItem[]
  orders         Order[]
  paymentMethods PaymentMethod[]
  CustomOrder    CustomOrder[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  price       Float
  description String
  weight      Float
  size        Float
  quantity    Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  storeId     String
  cartItems   CartItem[]
  images      Image[]
  OrderItems  OrderItem[]
  store       Store       @relation(fields: [storeId], references: [id])
  categories  Category[]  @relation("CategoryToProduct")
}

model Category {
  id       String    @id @default(cuid())
  name     String
  products Product[] @relation("CategoryToProduct")
  stores   Store[]   @relation("CategoryToStore")
}

model Image {
  id        String  @id @default(cuid())
  productId String
  link      String
  product   Product @relation(fields: [productId], references: [id])
}

model Store {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  image       String
  sellerId    String        @unique
  phoneNumber String?       @unique
  instagramId String?       @unique
  facebookId  String?       @unique
  products    Product[]
  seller      Seller        @relation(fields: [sellerId], references: [id])
  categories  Category[]    @relation("CategoryToStore")
  orders      Order[]       @relation("OrderToStore")
  CustomOrder CustomOrder[]
}

model Seller {
  id          String @id @default(cuid())
  name        String @unique
  cpf         String @unique
  phoneNumber String @unique
  Store       Store?
}

model Address {
  id           String        @id @default(cuid())
  street       String
  number       String
  neighborhood String?
  city         String
  state        String
  country      String
  postalCode   String
  recipient    String
  reference    String?
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  orders       Order[]
  CustomOrder  CustomOrder[]
}

model PaymentMethod {
  id          String        @id @default(cuid())
  type        String
  userId      String
  orders      Order[]
  user        User          @relation(fields: [userId], references: [id])
  CustomOrder CustomOrder[]
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id               String         @id @default(cuid())
  totalAmount      Float
  deliveryExpenses Float
  orderStatus      orderStatus
  trackingCode     String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           String
  addressId        String?
  paymentMethodId  String?
  address          Address?       @relation(fields: [addressId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
  paymentMethod    PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  orderItems       OrderItem[]
  stores           Store[]        @relation("OrderToStore")
}

model OrderItem {
  id            String       @id @default(cuid())
  quantity      Int
  productId     String
  orderId       String
  order         Order        @relation(fields: [orderId], references: [id])
  product       Product      @relation(fields: [productId], references: [id])
  CustomOrder   CustomOrder? @relation(fields: [customOrderId], references: [id])
  customOrderId String?
}

model CustomOrder {
  id               String         @id @default(cuid())
  title            String
  description      String
  userId           String
  categoryId       String
  storeId          String
  price            Float
  deliveryExpenses Float
  orderStatus      orderStatus
  trackingCode     String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  addressId        String?
  paymentMethodId  String?
  address          Address?       @relation(fields: [addressId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
  paymentMethod    PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  orderItems       OrderItem[]
  store            Store          @relation(fields: [storeId], references: [id])
  responses        Response[]
}

model Response {
  id          String  @id @default(cuid())
  title       String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customOrderId String
  customOrder   CustomOrder @relation(fields: [customOrderId], references: [id])
}

enum Role {
  ADMIN
  CUSTOMER
}

enum orderStatus {
  PENDING
  WAITING_PAYMENT
  CANCELLED
  READY_TO_SEND
  IN_TRANSPORT
  CONCLUDED
}
